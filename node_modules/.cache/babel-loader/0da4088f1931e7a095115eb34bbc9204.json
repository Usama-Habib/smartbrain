{"ast":null,"code":"var _jsxFileName = \"/home/muhammad/Desktop/smartbrain/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Clarifai from 'clarifai';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Particles from 'react-particles-js';\nimport ImageRecognition from './components/ImageRecognition/ImageRecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '7ebc9459b3ef4a1da7ee52e6b32c58cb'\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      }); // console.log(event.target.value)\n    };\n\n    this.onButtonPress = event => {\n      console.log('click');\n      app.models.predict( // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n      // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n      // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n      // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n      // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n      // so you would change from:\n      // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      // to:\n      // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n      Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        console.log('hi', response);\n\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n\n    this.state = {\n      input: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonPress: this.onButtonPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ImageRecognition, {\n        imageURL: this.state.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/muhammad/Desktop/smartbrain/src/App.js"],"names":["React","Component","Navigation","Clarifai","Logo","Rank","ImageLinkForm","Particles","ImageRecognition","app","App","apiKey","constructor","onInputChange","event","setState","input","target","value","onButtonPress","console","log","models","predict","FACE_DETECT_MODEL","state","then","response","fetch","method","headers","body","JSON","stringify","id","user","json","count","Object","assign","entries","displayFaceBox","calculateFaceLocation","catch","err","render","config"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,gBAAP,MAA6B,gDAA7B;;AAEA,MAAMC,GAAG,GAAG,IAAIN,QAAQ,CAACO,GAAb,CAAiB;AAC5BC,EAAAA,MAAM,EAAE;AADoB,CAAjB,CAAZ;;AAMA,MAAMD,GAAN,SAAkBT,SAAlB,CAA4B;AAE1BW,EAAAA,WAAW,GAAI;AACb;;AADa,SASdC,aATc,GASGC,KAAD,IAAW;AAC1B,WAAKC,QAAL,CAAc;AAACC,QAAAA,KAAK,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAArB,OAAd,EAD0B,CAE1B;AACD,KAZc;;AAAA,SAcfC,aAde,GAcCL,KAAD,IAAW;AACxBM,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAZ,MAAAA,GAAG,CAACa,MAAJ,CACGC,OADH,EAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApB,MAAAA,QAAQ,CAACqB,iBAXb,EAYI,KAAKC,KAAL,CAAWT,KAZf,EAaGU,IAbH,CAaQC,QAAQ,IAAI;AAChBP,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBM,QAAlB;;AACA,YAAIA,QAAJ,EAAc;AACZC,UAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,YAAAA,MAAM,EAAE,KAD2B;AAEnCC,YAAAA,OAAO,EAAE;AAAC,8BAAgB;AAAjB,aAF0B;AAGnCC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,cAAAA,EAAE,EAAE,KAAKT,KAAL,CAAWU,IAAX,CAAgBD;AADD,aAAf;AAH6B,WAAhC,CAAL,CAOGR,IAPH,CAOQC,QAAQ,IAAIA,QAAQ,CAACS,IAAT,EAPpB,EAQGV,IARH,CAQQW,KAAK,IAAI;AACb,iBAAKtB,QAAL,CAAcuB,MAAM,CAACC,MAAP,CAAc,KAAKd,KAAL,CAAWU,IAAzB,EAA+B;AAAEK,cAAAA,OAAO,EAAEH;AAAX,aAA/B,CAAd;AACD,WAVH;AAYD;;AACD,aAAKI,cAAL,CAAoB,KAAKC,qBAAL,CAA2Bf,QAA3B,CAApB;AACD,OA9BH,EA+BGgB,KA/BH,CA+BSC,GAAG,IAAIxB,OAAO,CAACC,GAAR,CAAYuB,GAAZ,CA/BhB;AAgCD,KAhDc;;AAGb,SAAKnB,KAAL,GAAa;AACXT,MAAAA,KAAK,EAAE;AADI,KAAb;AAID;;AA2CD6B,EAAAA,MAAM,GAAI;AACR,wBACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,WAArB;AACE,QAAA,MAAM,EAAGC;AADX;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,aAAD;AAAe,QAAA,aAAa,EAAE,KAAKjC,aAAnC;AAAkD,QAAA,aAAa,EAAE,KAAKM;AAAtE;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE,QAAC,gBAAD;AAAkB,QAAA,QAAQ,EAAE,KAAKM,KAAL,CAAWT;AAAvC;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAaD;;AAlEyB;;AAqE5B,eAAeN,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Clarifai from 'clarifai';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Particles from 'react-particles-js';\nimport ImageRecognition from './components/ImageRecognition/ImageRecognition';\n\nconst app = new Clarifai.App({\n apiKey: '7ebc9459b3ef4a1da7ee52e6b32c58cb'\n});\n\n\n\nclass App extends Component {\n\n  constructor () {\n    super();\n\n    this.state = {\n      input: '',\n\n    }\n  }\n\n   onInputChange = (event) => {\n    this.setState({input: event.target.value});\n    // console.log(event.target.value)\n  }\n\n  onButtonPress =(event) => {\n    console.log('click')\n    app.models\n      .predict(\n        // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n        // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n        // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n        // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n        // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n        // so you would change from:\n        // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n        // to:\n        // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n        Clarifai.FACE_DETECT_MODEL,\n        this.state.input)\n      .then(response => {\n        console.log('hi', response)\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          })\n            .then(response => response.json())\n            .then(count => {\n              this.setState(Object.assign(this.state.user, { entries: count}))\n            })\n\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response))\n      })\n      .catch(err => console.log(err));\n  }\n\n  render () {\n    return (\n    <div className=\"App\">\n      <Particles className=\"particles\" \n        params ={config}\n      />\n      <Navigation />\n      <Logo />\n      <Rank />\n      <ImageLinkForm onInputChange={this.onInputChange} onButtonPress={this.onButtonPress}/>\n      <ImageRecognition imageURL={this.state.input}/>\n     \n    </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}