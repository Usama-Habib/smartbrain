{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UsamaArain\\\\Desktop\\\\NodeJs\\\\smartbrain\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Clarifai from 'clarifai';\nimport Logo from './components/Logo/Logo';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Rank from './components/Rank/Rank';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Particles from 'react-particles-js';\nimport ImageRecognition from './components/ImageRecognition/ImageRecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  \"particles\": {\n    \"number\": {\n      \"value\": 80,\n      \"density\": {\n        \"enable\": true,\n        \"value_area\": 800\n      }\n    }\n  }\n}; //You must add your own API key here from Clarifai.\n\nconst app = new Clarifai.App({\n  apiKey: '7ebc9459b3ef4a1da7ee52e6b32c58cb'\n});\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: 0,\n    name: \"\",\n    email: '',\n    count: 0,\n    created: new Date()\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.password,\n          count: data.entries,\n          created: data.joined\n        }\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      }); // console.log(event.target.value)\n    };\n\n    this.onButtonPress = event => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict( // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n      // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n      // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n      // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n      // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n      // so you would change from:\n      // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      // to:\n      // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n      Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        // console.log('hi', response.outputs[0].data.regions[0].region_info.bounding_box)\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              count: count\n            }));\n          });\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      } else if (route === 'signout') {\n        this.setState(initialState);\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    const {\n      isSignedIn,\n      route,\n      input,\n      imageUrl,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          count: this.state.user.count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonPress: this.onButtonPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageRecognition, {\n          box: box,\n          imageUrl: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this) : route === 'signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/UsamaArain/Desktop/NodeJs/smartbrain/src/App.js"],"names":["React","Component","Navigation","Clarifai","Logo","Signin","Register","Rank","ImageLinkForm","Particles","ImageRecognition","config","app","App","apiKey","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","count","created","Date","constructor","loadUser","data","setState","password","entries","joined","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","console","log","onInputChange","event","target","value","onButtonPress","state","models","predict","FACE_DETECT_MODEL","then","response","fetch","method","headers","body","JSON","stringify","json","Object","assign","catch","err","onRouteChange","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Clarifai from 'clarifai';\r\nimport Logo from './components/Logo/Logo';\r\nimport Signin from './components/Signin/Signin';\r\nimport Register from './components/Register/Register';\r\nimport Rank from './components/Rank/Rank';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport Particles from 'react-particles-js';\r\nimport ImageRecognition from './components/ImageRecognition/ImageRecognition';\r\n\r\nconst config = {\r\n  \"particles\":{\r\n    \"number\":{\r\n      \"value\":80,\r\n      \"density\":{\r\n        \"enable\":true,\r\n        \"value_area\":800\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n//You must add your own API key here from Clarifai.\r\nconst app = new Clarifai.App({\r\n apiKey: '7ebc9459b3ef4a1da7ee52e6b32c58cb'\r\n});\r\n\r\nconst initialState = {\r\n  input: '',\r\n  imageUrl : '',\r\n  box: {},\r\n  route: 'signin',\r\n  isSignedIn: false,\r\n  user:{\r\n    id: 0,\r\n    name: \"\",\r\n    email: '',\r\n    count: 0,\r\n    created: new Date\r\n  }\r\n}\r\nclass App extends Component {\r\n\r\n  constructor () {\r\n    super();\r\n\r\n    this.state = initialState\r\n  }\r\n\r\n  loadUser = (data) => {\r\n    this.setState({\r\n      user:{\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.password,\r\n        count: data.entries,\r\n        created: data.joined\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  calculateFaceLocation = (data) => {\r\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const image = document.getElementById('inputimage');\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    return {\r\n      leftCol: clarifaiFace.left_col * width,\r\n      topRow: clarifaiFace.top_row * height,\r\n      rightCol: width - (clarifaiFace.right_col * width),\r\n      bottomRow: height - (clarifaiFace.bottom_row * height)\r\n    }\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    console.log(box);\r\n    this.setState({box: box});\r\n  }\r\n\r\n   onInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n    // console.log(event.target.value)\r\n  }\r\n\r\n  onButtonPress = (event) => {\r\n    this.setState({imageUrl: this.state.input});\r\n    app.models\r\n      .predict(\r\n        // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\r\n        // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\r\n        // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\r\n        // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\r\n        // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\r\n        // so you would change from:\r\n        // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\r\n        // to:\r\n        // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\r\n        Clarifai.FACE_DETECT_MODEL,\r\n        this.state.input)\r\n      .then(response => {\r\n        // console.log('hi', response.outputs[0].data.regions[0].region_info.bounding_box)\r\n        if (response) {\r\n          fetch('http://localhost:3000/image', {\r\n            method: 'PUT',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n              id: this.state.user.id\r\n            })\r\n          })\r\n            .then(response => response.json())\r\n            .then(count => {\r\n              this.setState(Object.assign(this.state.user, { count: count}))\r\n            })\r\n        }\r\n        this.displayFaceBox(this.calculateFaceLocation(response))\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  onRouteChange = (route) => {\r\n    if (route === 'home') {\r\n      this.setState({isSignedIn: true})\r\n    }else if (route === 'signout') {\r\n      this.setState(initialState)\r\n    }\r\n    this.setState({route: route})\r\n  }\r\n\r\n  render () {\r\n\r\n    const { isSignedIn, route, input, imageUrl, box } = this.state;\r\n\r\n    return (\r\n    <div className=\"App\">\r\n      <Particles className=\"particles\" \r\n        params ={config} />\r\n      <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange}/>\r\n      {\r\n        route === 'home' ? \r\n        <div> \r\n            <Logo />\r\n            <Rank name={this.state.user.name} count={this.state.user.count} />\r\n            <ImageLinkForm onInputChange={this.onInputChange} onButtonPress={this.onButtonPress}/>\r\n            <ImageRecognition box={box} imageUrl={input}/>     \r\n        </div>\r\n        : (\r\n          route === 'signin' ? \r\n          <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\r\n          : \r\n          <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\r\n        )\r\n      }\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}